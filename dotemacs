

(setq package-list '(better-defaults
                     solarized-theme
                     helm
                     helm-projectile
                     helm-ag
                     ruby-electric
                     rbenv
                     seeing-is-believing
                     enh-ruby-mode
                     ruby-test-mode
                     ido
                     projectile-rails
                     rspec-mode
                     multiple-cursors
                     slim-mode
                     fsharp-mode
                     eglot-fsharp
                     dash
                     s
                     editorconfig
                     exec-path-from-shell
                     flycheck
                     web-mode
                     typescript-mode
                     ))
; List the repositories containing them
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

; activate all the packages (in particular autoloads)
(package-initialize)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'better-defaults)
(autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
(add-to-list 'auto-mode-alist '("\\.rb\\'" . enh-ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))


(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

(setq inhibit-splash-screen t
      initial-scratch-message nil
      initial-major-mode 'enh-ruby-mode)


;....
(require 'desktop)
(setq desktop-path (list "~/.emacs.d/"))
(desktop-save-mode 1)
;(desktop-read)


(setq inhibit-splash-screen t
      initial-scratch-message nil
      initial-major-mode 'ruby-mode)

(load-theme 'zenburn t)

;; Show line numbers
(global-linum-mode)

;; Typography
(set-face-attribute 'default nil
                    :family "Monaco"
                    :height 150
                    :weight 'normal
                    :width 'normal)

(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "s-f") #'helm-projectile-ag)
(global-set-key (kbd "s-t") #'ruby-test-run-at-point)
(global-set-key (kbd "s-r") #'ruby-test-rerun)
;(global-set-key (esc-map ">") #'end-of-buffer)

;(add-hook 'ruby-mode-hook 'ruby-electric-mode)
(add-to-list 'auto-mode-alist
             '("\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" . enh-ruby-mode))
(add-to-list 'auto-mode-alist
             '("\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" . enh-ruby-mode))

(global-rbenv-mode)
(rbenv-use-global)

(setq seeing-is-believing-prefix "C-.")
(add-hook 'ruby-mode-hook 'seeing-is-believing)
(require 'seeing-is-believing)

;; (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
;; (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
(require 'ruby-test-mode)
(add-hook 'ruby-mode-hook 'ruby-test-mode)


;; (add-hook 'compilation-finish-functions
;;           (lambda (buf strg)
;;             (switch-to-buffer-other-window "*compilation*")
;;             (read-only-mode)
;;             (goto-char (point-max))
;;             (local-set-key (kbd "q")
;;                            (lambda () (interactive) (quit-restore-window)))))

(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq explicit-shell-file-name "/bin/bash")
(setq shell-file-name "bash")
(setq explicit-zsh-args '("--login" "--interactive"))
(defun zsh-shell-mode-setup ()
  (setq-local comint-process-echoes t))
(add-hook 'shell-mode-hook #'zsh-shell-mode-setup)
(projectile-rails-global-mode)
(define-key projectile-rails-mode-map (kbd "C-c r") 'projectile-rails-command-map)

(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "s-f") #'helm-projectile-ag)
(global-set-key (kbd "s-p") #'ruby-test-toggle-implementation-and-specification)
(global-set-key (kbd "M-RET") #'copilot-accept-completion)
(global-set-key (kbd "M-l") #'copilot-accept-completion-by-line)

(setq helm-locate-command
      "glocate %s %s"
      helm-locate-create-db-command
      "gupdatedb --output='%s' --localpaths='%s'")

(setq helm-locate-project-list
      (list "/Users/svs/.emacs.d/"))

(setq ruby-test-default-library
      "rspec")      


(add-to-list 'load-path "/USers/svs/.emacs.d/copilot.el")
(require 'copilot)

(add-to-list 'ruby-test-implementation-filename-mapping
             `(,(pcre-to-elisp "(.*)/spec/requests/(.*)_spec\\.rb$") "\\1/app/controllers/\\2_controller.rb"))
(add-to-list 'ruby-test-implementation-filename-mapping
             `(,(pcre-to-elisp "(.*)/spec/requests/(.*)_spec\\.rb$") "\\1/app/controllers/\\2.rb"))

(add-to-list 'ruby-test-specification-filename-mapping
             `(,(pcre-to-elisp "(.*)/app/controllers/(.*)_controller\\.rb$") "\\1/spec/controllers/\\2_controller_spec.rb"))

(add-to-list 'ruby-test-specification-filename-mapping
             `(,(pcre-to-elisp "(.*)/app/controllers/(.*)_controller\\.rb$") "\\1/spec/controllers/\\2_spec.rb"))



(add-to-list 'ruby-test-implementation-filename-mapping
             `(,(pcre-to-elisp "(.*)/spec/policies/(.*)_spec\\.rb$") "\\1/app/policies/\\2.rb"))
(add-to-list 'ruby-test-specification-filename-mapping
             `(,(pcre-to-elisp "(.*)/app/policies/(.*)\\.rb$") "\\1/spec/policies/\\2_spec.rb"))
(setq ruby-test-rspec-options "")

(delete-selection-mode 1)
